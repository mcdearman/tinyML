-- arithmetic operators
1 + 2
1 - 2
1 * 2
1 / 2

-- value definition
def x = 1

-- function definition
def f x = x + 1

-- lambda
\a b -> a + b

-- lambda application
(\a b -> a + b) 1 2

-- function application
f x

-- negation
-x

-- not
!x

-- let expression
let x = 1 in x + 1

-- let expression function definition
let f x = x + 1 in f 1

-- do expression
do
  x <- foo;
  y <- bar;
  pure (x + y)
end 

-- fn match
def map : 'a 'b. ('a -> 'b) -> ['a] -> ['b]
  | f [] = []
  | f (x :: xs) = f x :: map f xs

def map : ('a -> 'b) -> ['a] -> ['b]
  | f [] = []
  | f (x :: xs) = f x :: map f xs

def map
  | f [] = []
  | f (x :: xs) = f x :: map f xs

def map 'a 'b (f : 'a -> 'b) (xs : ['a]) : ['b] = 
  match xs with
  | [] -> []
  | (x::xs) -> f x :: map f xs

def compose 'a 'b 'c 
  (f : 'b -> 'c) 
  (g : 'a -> 'b) 
  : 'a -> 'c = \x -> f (g x)

-- unicode support
def π = 3.14159

def (∘) 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c
  | f ∘ g = compose f g

data Option 'a = None | Some 'a

data Either 'a 'b = Left 'a | Right 'b

data Result 'a 'b = Ok 'a | Error 'b

data List 'a = Empty | Pair 'a (List 'a)

-- record
data Person = { name : String, age : Int }

-- record update
let p = { name = "John", age = 30 } in p { age = 31 }

-- record access
let p = { name = "John", age = 30 } in p.name

-- sum type
data Shape = Circle Float | Rectangle Float Float

-- pipe
def (|>) : 'a 'b. 'a -> ('a -> 'b) -> 'b
  | x |> f = f x

def (::) : 'a. 'a -> ['a] -> ['a]
  | x :: xs = x :: xs

-- methods with pipe
[1, 2, 3]
  |> List.map (+ 1)
  |> List.filter ((= 0) ∘ (% 2))

def freeVars (Context fs) =
  fs
    |> map (Map.elems)
    |> List.concat
    |> map Scheme.freeVars
    |> Set.unions

