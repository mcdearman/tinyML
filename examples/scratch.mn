-- main data types:
42b -- Byte
42 -- Int
1/2 -- Rational
1.0 -- Real
"hello" -- String
'a' -- Char
true -- Bool
() -- Unit

-- Files are composed of declarations at the top level. In the notebook 
-- or repl, you can use expressions at the top level. You can think of 
-- this as a shorthand for `let main args = <expr>`. In files, the main 
-- function must be defined explicitly:
main : #[String] -> ()
main args = ()

-- Bindings are immutable by default.
x = 1

-- pattern binding
(a, b, c) = (1, 2, 3)

-- ints
1

-- booleans
true

-- Binary operators
1 + 2 * 3^2 - 4 / 5 % 10

-- Unary operators
-1
-- => -1

not true
-- => false

-- Boolean operators
true and false or true
-- => true

-- Comparison
1 < 2 and 2 <= 3 and 3 > 2 and 3 >= 2 and 2 = 2 and 2 != 3

-- if-then-else
if 1 < 2 then 1 else 2

-- let-in
let x = 1 in x + 1

-- function definition
f x = x + 1

-- this is equivalent to
f = \x -> x + 1

-- function expression
let f x = x + 1 in f 1

-- function application
f 1

-- closure
\x -> x + 1

-- closure application
(\x -> x + 1) 1

-- nested let
let x = 1 in let y = 2 in x + y

-- recursion
fib n = 
  if n <= 1 then n 
  else fib (n - 1) + fib (n - 2) 

gcd a b = 
  if b = 0 then a 
  else gcd b (a % b)

-- with type annotations
gcd (a : Int) (b : Int) : Int =
  if b = 0 then a 
  else gcd b (a % b)

fib (n : Int) : Int =
  if n <= 1 then n 
  else fib (n - 1) + fib (n - 2)

lcm (a : Int) (b : Int) : Int =
  a * b / gcd a b

lcm a b = a * b / gcd a b

-- tail recursive fib
fib n = 
  let loop a b i = 
    if i = 0 then a 
    else loop b (a + b) (i - 1)
  in loop 0 1 n

-- pattern match
fib n = 
  match n
  | 0 -> 0
  | 1 -> 1
  | n -> fib (n - 1) + fib (n - 2)

fact n =
  let loop acc n =
    if n = 0 then acc
    else loop (acc * n) (n - 1)
  in loop 1 n

map a b. (f : a -> b) (xs : [a]) : [b] =
  match xs with
  | [] -> []
  | (x::xs) -> f x :: map f xs

map f xs = match xs with
  [] -> []
  (x::xs) -> f x :: map f xs

-- or
map : a b. (a -> b) -> [a] -> [b]
map f [] -> []
map f (x::xs) -> f x :: map f xs

foldl a b. (f : a -> b -> a) (acc : a) (xs : [b]) : a =
  match xs with
  | [] -> acc
  | (x :: xs) -> foldl f (f acc x) xs

foldl f acc xs =
  match xs with
  | [] -> acc
  | (x :: xs) -> foldl f (f acc x) xs

foldl = \f acc xs ->
  match xs with
  | [] -> acc
  | (x :: xs) -> foldl f (f acc x) xs

foldl : a b. (a -> b -> a) -> a -> [b] -> a
  | f acc [] = acc
  | f acc (x::xs) = foldl f (f acc x) xs

-- possible uncurried version of sigs
foldl : a b. [b] (a b -> a) a -> a
  | [] f acc -> acc
  | (x::xs) f acc -> foldl f (f acc x) xs

foldl f acc xs = match xs with
  [] -> acc
  (x::xs) -> foldl f (f acc x) xs

foldr f acc xs = match xs with
  | [] -> acc
  | (x::xs) -> f x (foldr f acc xs)

binary_search (x : Int) (xs : #[Int] -> Int) : Int =
  let loop l r =
    if l > r then -1
    else
      let m = (l + r) / 2 in
      if Array.get xs m = n then m
      else if Array.get xs m < n then loop (m + 1) r
      else loop l (m - 1)
  in loop 0 (Array.len xs - 1)

-- type alias
type Point = (Int, Int)

-- records
data Person = { name : String, age : Int }
p = { name = "Alice", age = 30 }

-- records with public fields
data Person = { pub name : String, pub age : Int }

-- sum types
data Option a = None | Some a

data List a = Empty | Pair a (List a)

data NonEmptyList a = NonEmpty a (List a)

(|>) : a b. a -> (a -> b) -> b
  | x |> f = f x

-- possible uncurried version of sigs
(|>) : a b c. a (a ..b -> c) -> (..b -> c)
  | x f -> f x _..

(::) : a. a -> [a] -> [a]
  | x :: xs = Pair x xs

-- methods with pipe
[1, 2, 3]
  |> into_iter
  |> map (+ 1)
  |> filter ((= 0) ∘ (% 2))

-- into_iter postfix operator
[1, 2, 3]!
  |> map (+ 1)
  |> filter ((= 0) ∘ (% 2))
  |> reduce (+)

-- iterator comprehensions
[for x in [1, 2, 3] if x % 2 = 0]

-- type classes
class Eq a where
  eq : a -> a -> Bool

instance Eq Int where
  eq = prim_int_eq

instance Eq (Option a) where
  eq : Eq a => Option a -> Option a -> Bool
    | None None = true 
    | (Some x) (Some y) = eq x y
    |  _ _ = false

class Ord a where
  compare : a -> a -> Ordering

class Add a b where
  type Output = a
  add : a -> a -> Output

class Iterator i where
  next : i a -> Option (a, i a)

class IntoIterator i where
  into_iter : i a -> Iterator a

instance IntoIterator [a] where
  into_iter = ListIterator



