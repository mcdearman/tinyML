-- arithmetic operators
1 + 2
1 - 2
1 * 2
1 / 2

-- value definition
def x = 1

-- function definition
def f x = x + 1

-- lambda
\a b -> a + b

-- lambda application
(\a b -> a + b) 1 2

-- function application
f x

-- negation
-x

-- not
!x

-- let expression
let x = 1 in x + 1

-- let expression function definition
let f x = x + 1 in f 1

-- do expression
do
  x <- foo;
  y <- bar;
  return (x + y)
end 

-- fn match
def map : 'a 'b. ('a -> 'b) -> ['a] -> ['b]
  | f [] = []
  | f (x :: xs) = f x :: map f xs

def map
  | f [] = []
  | f (x :: xs) = f x :: map f xs

def map 'a 'b (f : 'a -> 'b) (xs : ['a]) : ['b] = 
  match xs with
  | [] -> []
  | (x::xs) -> f x :: map f xs

def (.) : 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c
  | f . g = \x -> f (g x)

data Option 'a = None | Some 'a

data Either 'a 'b = Left 'a | Right 'b

type Result 'a 'b = Either 'a 'b

data List 'a = Nil | Pair 'a (List 'a)

-- record
data Person = { name : String, age : Int }

-- sum type
data Shape = Circle Float | Rectangle Float Float