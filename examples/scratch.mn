-- main data types:
42b -- Byte
42 -- Int
1/2 -- Rational
1.0 -- Real
"hello" -- String
'a' -- Char
true -- Bool
() -- Unit

-- Files are composed of declarations at the top level. In the notebook 
-- or repl, you can use expressions at the top level. You can think of 
-- this as a shorthand for `main args = <expr>`. In files, the main 
-- function must be defined explicitly:
main : [String] -> IO ()
main args = print "Hello, World!"

-- Bindings are immutable by default.
def x = 1

-- pattern binding
[a, b, c] = [1, 2, 3]
-- > error: top level irrefutable pattern binding is not allowed

-- irrefutable pattern binding
xs = [1, 2, 3]

-- ints
1

-- booleans
true

-- Binary operators
1 + 2 * 3^2 - 4 / 5 % 10

-- Unary operators
-1
-- => -1

not true
-- => false

-- Boolean operators
true and false or true
-- => true

-- Comparison
1 < 2 and 2 <= 3 and 3 > 2 and 3 >= 2 and 2 = 2 and 2 != 3

-- if-then-else
if 1 < 2 then 1 else 2

-- let-in
let x = 1 in x + 1

-- function definition
def f x = x + 1

-- this is equivalent to
def f = \x -> x + 1

-- function expression
let f x = x + 1 in f 1

-- function application
f 1

-- closure
\x -> x + 1

-- closure application
(\x -> x + 1) 1

-- nested let
let x = 1 in let y = 2 in x + y

-- recursion
def fib n = 
  if n <= 1 then n 
  else fib (n - 1) + fib (n - 2) 

def gcd a b = 
  if b = 0 then a 
  else gcd b (a % b)

-- with type annotations
def gcd (a : Int) (b : Int) : Int =
  if b = 0 then a 
  else gcd b (a % b)

def fib (n : Int) : Int =
  if n <= 1 then n 
  else fib (n - 1) + fib (n - 2)

-- tail recursive fib
def fib n = 
  let loop a b i = 
    if i = 0 then a 
    else loop b (a + b) (i - 1)
  in loop 0 1 n

-- pattern match
def fib n = 
  match n
  | 0 -> 0
  | 1 -> 1
  | n -> fib (n - 1) + fib (n - 2)

def fact n =
  let loop acc n =
    if n = 0 then acc
    else loop (acc * n) (n - 1)
  in loop 1 n

def map a b. (f : a -> b) (xs : [a]) : [b] =
  match xs with
  | [] -> []
  | (x::xs) -> f x :: map f xs

pub def map f xs = match xs with
  [] -> []
  (x::xs) -> f x :: map f xs

map : a b. (a -> b) -> [a] -> [b]
map f [] -> []
map f (x::xs) -> f x :: map f xs

def foldl a b. (f : a -> b -> a) (acc : a) (xs : [b]) : a =
  match xs with
  | [] = acc
  | (x :: xs) = foldl f (f acc x) xs

foldl : a b. (a -> b -> a) -> a -> [b] -> a
foldl f acc [] -> acc
foldl f acc (x::xs) -> foldl f (f acc x) xs

def foldl : a b. (a -> b -> a) -> a -> [b] -> a
  | f acc [] -> acc
  | f acc (x::xs) -> foldl f (f acc x) xs

def foldl f acc xs = match xs with
  [] -> acc
  (x::xs) -> foldl f (f acc x) xs

def e5 : Int = foldl lcm 2520 [11..20]

def e6 : Int = (square <| sum [1..100]) - (sum <| map square [1..100])
  where square x = x * x

def foldr f acc xs = match xs with
  | [] -> acc
  | (x::xs) -> f x (foldr f acc xs)

def binary_search (x : Int) (xs : #[Int] -> Int) : Int =
  let loop l r =
    if l > r then -1
    else
      let m = (l + r) / 2 in
      if Array.get xs m = n then m
      else if Array.get xs m < n then loop (m + 1) r
      else loop l (m - 1)
  in loop 0 (Array.len xs - 1)

-- type alias
type Point = (Int, Int)

-- records
data Person = { name : String, age : Int }
def p = { name = "Alice", age = 30 }

-- records with public fields
data Person = { pub name : String, pub age : Int }

-- sum types
data Option a = None | Some a

data List a = Empty | Pair a (List a)

data NonEmptyList a = NonEmpty a (List a)

def (|>) : a b. a -> (a -> b) -> b
  | x |> f = f x

def (<|) : a b. (a -> b) -> a -> b
  | f <| x = f x

-- possible uncurried version of sigs
def (|>) : a b c. a (a ..b -> c) -> (..b -> c)
  | x f -> f x _..

def (::) : a. a -> [a] -> [a]
  | x :: xs = Pair x xs

-- methods with pipe
[1, 2, 3]
  |> map (+ 1)
  |> filter ((= 0) âˆ˜ (% 2))

-- type classes
class Eq a where
  def eq : a -> a -> Bool

instance Eq Int where
  def eq = prim_int_eq

instance Eq (Option a) where
  def eq : Eq a => Option a -> Option a -> Bool
    | None None = true 
    | (Some x) (Some y) = eq x y
    |  _ _ = false

class Ord a where
  def compare : a -> a -> Ordering

class Add a b where
  type Output = a
  add : a -> a -> Output

class Iterator i where
  next : i a -> Option (a, i a)

class IntoIterator i where
  into_iter : i a -> Iterator a

instance IntoIterator [a] where
  into_iter = ListIterator



