f x = x + 1

-- is printed with Debug as:

Module @ 0..11
  Def @ 0..11
    name : f1 @ 0..1
    args : x1 @ 2..3
    body : Expr @ 6..11
      kind : Apply @ 6..11
        fun  : add @ 6..7
        args : x1 @ 10..11

map (f : a -> b) (xs : [a]) : [b] =
  match xs with
  | [] -> []
  | (x::xs) -> f x :: map f xs

-- is printed with Debug as:

Module @ 0..92
  Def @ 0..92
    name : map @ 0..3
    args : f1 @ 4..11, xs1 @ 13..20
    body : Expr @ 23..92
      kind : Match @ 23..92
        expr : xs @ 30..92
        cases : @ 34..92
          Pattern @ 34..39
            kind : List @ 34..36
          Expr @ 38..39
            kind : List @ 38..39
          Pattern @ 41..49
            kind : Pair @ 41..49
              x1 @ 42..43
              xs1 @ 46..49
          Expr @ 51..92
            kind : Apply @ 51..92
              fun  : Pair @ 51..53
              args : Apply @ 51..92
                fun  : f1 @ 51..52
                args : x1 @ 55..56
              args : Apply @ 51..92
                fun  : map @ 51..54
                args : f1 @ 59..60, xs1 @ 62..63


