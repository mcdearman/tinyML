-- A pair list is either empty or a pair of an element and a pair list.
type List T
  = Pair { head : T, tail : List T }
  | Empty

-- [len] takes a list [xs] and returns the number of elements in [xs].
pub def len (xs : List a) : Int =
  match xs with
  | List.Pair x -> 1 + len x
  | List.Nil -> 0

-- [map] takes a function [f] and a list [xs] and returns the list of
-- the results of applying [f] to each element of [xs].
pub def map (f : a -> b) (xs : List a) : List b =
  match xs with
  | List::Pair x -> Pair (map f x) 
  | List::Empty -> []

-- [filter] takes a predicate [f] and a list [xs] and returns the 
-- list of all elements [x] in [xs] such that [f x] is [True].
pub def filter (f : T -> Bool) (xs : List T) : List T =
  match xs with
  | List::Pair x ->
      if f x then
        Pair (filter f x)
      else
        filter f x
  | List::Empty -> Nil

-- [foldl] takes a binary operator [f], a starting value [z], and a list [xs],
-- and returns the result of inserting [f] between successive elements of [xs],
-- starting [z] to the left of the leftmost element of [xs].
pub def foldl (f : a -> b -> a) (z : a) (xs : List a) : a =
  match xs with
  | List::Pair x -> foldl f (f z x) x
  | List::Empty -> z

-- [foldr] takes a binary operator [f], a starting value [z], and a list [xs],
-- and returns the result of inserting [f] between successive elements of [xs],
-- starting the rightmost element of [xs] to the right of [z].
-- foldr :: (a -> b -> b) -> b -> List a -> b
pub def foldr f z xs =
  match xs with
    Nil -> z
    Pair x -> f x (foldr f z x)

-- [reduce] takes a binary operator [f] and a list [xs] and returns the result
-- of inserting [f] between successive elements of [xs], starting the
-- leftmost element of [xs].
-- reduce :: (a -> a -> a) -> List a -> a
pub def reduce f xs =
  match xs with
    Nil -> error "reduce: empty list"
    Pair x -> foldl f x x

instance Iterator List where
  next xs =
    match xs with
    | List::Pair x -> Some (x, x)
    | List::Empty -> None