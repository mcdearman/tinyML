-- A pair list is either empty or a pair of an element and a pair list.
type List T
  = Pair { head : T, tail : List T }
  | Empty

instance Iterator List where
  next Empty = None
  next (Pair x xs) = Some (x, xs)

-- [len] takes a list [xs] and returns the number of elements in [xs].
len : List a -> Int
len [] = 0
len (x::xs) = 1 + len xs

-- [map] takes a function [f] and a list [xs] and returns the list of
-- the results of applying [f] to each element of [xs].
map : (a -> b) -> List a -> List b
map f [] = []
map f (x::xs) = f x :: map f xs

-- [filter] takes a predicate [f] and a list [xs] and returns the 
-- list of all elements [x] in [xs] such that [f x] is [True].
filter : (a -> Bool) -> List a -> List a
filter f [] = []
filter f (x::xs) = if f x then x :: filter f xs else filter f xs

-- [foldl] takes a binary operator [f], a starting value [acc], and a list [xs],
-- and returns the result of inserting [f] between successive elements of [xs],
-- starting [acc] to the left of the leftmost element of [xs].
foldl : (a -> b -> a) -> a -> List b -> a
foldl f acc [] = acc
foldl f acc (x::xs) = foldl f (f acc x) xs

-- [foldr] takes a binary operator [f], a starting value [acc], and a list [xs],
-- and returns the result of inserting [f] between successive elements of [xs],
-- starting the rightmost element of [xs] to the right of [acc].
foldr : (a -> b -> b) -> b -> List a -> b
foldr f acc [] = acc
foldr f acc (x::xs) = f x (foldr f acc xs)

instance IntoIterator List where
  type Item List = a
  type IntoIter List = ListIter a

  into_iter xs = ListIter { iter = xs }

data ListIter a { iter : List a }

instance Iterator (ListIter a) where
  type Item (ListIter a) = a

  next (ListIter { iter = Empty }) = None
  next (ListIter { iter = Pair x xs }) = Some (x, ListIter { iter = xs })
