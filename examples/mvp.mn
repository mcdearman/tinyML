-- arithmetic operators
1 + 2
1 - 2
1 * 2
1 / 2

-- value definition
def x = 1

-- function definition
def f x = x + 1

-- lambda
\a b -> a + b

-- lambda application
(\a b -> a + b) 1 2

-- function application
f x

-- negation
-x

-- not
!x

-- let expression
let x = 1 in x + 1

-- let expression function definition
let f x = x + 1 in f 1

-- record definition
record Point { x : Int, y : Int }

-- record instantiation and field access
let p = Point { x = 1, y = 2 } in p.x + p.y

-- record update
let p = Point { x = 1, y = 2 } in { p with x = 3 }

-- Algebraic data type
data List a = Empty | Pair a (List a)

-- ADT instantiation
let l = Pair 1 (Pair 2 Empty) in l

-- Algebraic data type with infix constructor
data List a = [] | a :: List a

-- ADT infix instantiation
let l = 1 :: 2 :: [] in l




  