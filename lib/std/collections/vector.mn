-- Vector is the default collection type in MiniML. It's an immutable Vector
-- based on RRB-trees. It is a good choice for most use cases, as it is efficient
-- for both random access and sequential access. It is also a good choice for
-- functional programming, as it is immutable and can be easily transformed.

@derive(Debug, PartialEq, Eq)
pub struct Vector a = { 
  size : Int, 
  tree : Tree a 
}

pub enum Tree a = 
  | Leaf (List a)
  | Node (List (Tree a)) Int
  | Empty

impl Vector a where
    @inline
    def empty : Vector a = Vector { size = 0, tree = Empty }
    
    @inline
    def isEmpty (v : Vector a) : Bool = v.size == 0
    
    @inline
    def size (v : Vector a) : Int = v.size
    
    @inline
    def push (v : Vector a) (x : a) : Vector a =
        match v.tree with
        | Empty -> Vector { size = 1, tree = Leaf [x] }
        | Leaf xs -> 
        if List.length xs < 32 then
            Vector { size = v.size + 1, tree = Leaf (xs ++ [x]) }
        else
            let newTree = Node [Leaf xs] (List.length xs)
            Vector { size = v.size + 1, tree = newTree }
        | Node ts n -> 
        if n < 32 then
            let newTree = Node (ts ++ [Leaf [x]]) n
            Vector { size = v.size + 1, tree = newTree }
        else
            let newTree = Node [Leaf [x]] (List.length ts)
            Vector { size = v.size + 1, tree = newTree }

    @inline
    def pop (v : Vector a) : Option (a, Vector a) =
        match v.tree with
        | Empty -> None
        | Leaf xs -> 
            if List.isEmpty xs then None
            else Some (List.head xs, Vector { size = v.size - 1, tree = Leaf (List.tail xs) })
        | Node ts n -> 
            if n == 0 then None
            else 
                let newTree = Node (List.tail ts) (n - 1)
                Some (List.head ts, Vector { size = v.size - 1, tree = newTree })

impl Stream (Vector a) where
    type Item (Vector a) = a

    def next (v : Vector a) : Option (a, Vector a) =
        match v.tree with
        | Empty -> None
        | Leaf xs -> 
            if List.isEmpty xs then None
            else Some (List.head xs, Vector { size = v.size - 1, tree = Leaf (List.tail xs) })
        | Node ts n -> 
            if n == 0 then None
            else 
                let newTree = Node (List.tail ts) (n - 1)
                Some (List.head ts, Vector { size = v.size - 1, tree = newTree })